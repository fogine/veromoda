{
    listen: {
        public: {
            port: '${PUB_PORT}',
            type: 'public',
            alias: ''
        },
        internal: {
            port: '${INTERNAL_PORT}',
            type: 'private',
        },
        docs: {
            port: '${DOCS_PORT}',
            type: 'private',
        },
        'docs-internal': {
            port: '${INTERNAL_DOCS_PORT}',
            type: 'private',
        },
        cli: {
            port: '${CLI_PORT}',
            type: 'private-websocket',
        },
    },
    proxy: {
        public: {
            host: '${PUBLIC_VHOST:-${VHOST}}',
            ssl: ${PUBLIC_VHOST_SSL:-${VHOST_SSL}},
            protocol: '${PUBLIC_VHOST_PROTOCOL:-${VHOST_PROTOCOL}}'
        },
        private: {
            host: '${PRIVATE_VHOST:-${VHOST}}',
            ssl: ${PRIVATE_VHOST_SSL:-${VHOST_SSL}},
            protocol: '${PRIVATE_VHOST_PROTOCOL:-${VHOST_PROTOCOL}}'
        }
    },
    apps: {
        shell: {},
        cli: {
            baseUrl: {$join: [
                {$ref: '#/proxy/private/protocol'},
                '://',
                {$ref: '#/proxy/private/host'},
                ":",
                {$ref: '#/listen/cli/port'},
            ]},
            listen: {$ref: '#/listen/cli/port'},
            show: false,
        },
        public: {
            baseUrl: {$join: [
                {$ref: '#/proxy/public/protocol'},
                '://',
                {$ref: '#/proxy/public/host'},
                ":",
                {$ref: '#/apps/public/listen'},
            ]},
            listen: {$ref: '#/listen/public/port'},
            stopOnError: false,
            doc: {
                baseUrl: {$join: [
                    {$ref: '#/proxy/public/protocol'},
                    '://',
                    {$ref: '#/proxy/public/host'},
                    ":",
                    {$ref: '#/apps/public/doc/listen'},
                ]},
                listen: {$ref: '#/listen/docs/port'},
                name: 'docs',
                title: 'Depot',
                stopOnError: true,
                tryItOut: false
            },
            bodyParser: {$ref: '#/bodyParser'}
        },
        internal: {
            baseUrl: {$join: [
                {$ref: '#/proxy/private/protocol'},
                '://',
                {$ref: '#/proxy/private/host'},
                ":",
                {$ref: '#/apps/internal/listen'},
            ]},
            listen: {$ref: '#/listen/internal/port'},
            stopOnError: false,
            doc: {
                baseUrl: {$join: [
                    {$ref: '#/proxy/private/protocol'},
                    '://',
                    {$ref: '#/proxy/private/host'},
                    ":",
                    {$ref: '#/apps/internal/doc/listen'},
                ]},
                listen: {$ref: '#/listen/docs-internal/port'},
                name: 'docs-internal', //used in the cli
                title: 'Depot', //front-end title
                stopOnError: true,
                tryItOut: false
            },
            response: {$ref: '#/response'},
            bodyParser: {$ref: '#/bodyParser'}
        },
    },
    response: {
        headers: [
            ["Access-Control-Allow-Origin", "*"],
            ["Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, PATCH, DELETE, CONNECT"],
            ["Access-Control-Allow-Headers", "X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept"],
            //24 hours
            ["Access-Control-Max-Age", "86400"],
            ["X-Content-Type-Options", "nosniff"],
            ["X-Frame-Options", "deny"]
        ]
    },
    bodyParser: {
        'application/json': {
            limit: "2mb",
            extended: false
        }
    },
    storage: {
        postgres: {
            host: "${POSTGRES_HOST}",
            ssl: ${POSTGRES_SSL:-false},
            databases: {
                main: {
                    db: "${POSTGRES_DB}",
                    username: "${POSTGRES_USER}",
                    password: "${POSTGRES_PASSWORD}",
                }
            }
        }
    },
    logs: {
        exitOnError: false,  // determines whether a process will exit with status code 1 on 'uncaughtException' event
        transports: [
            {
                type: 'file',
                level: 'info', // maximum log level of this sepecific transport, [optional]
                json: false,
                priority: 0,
                dir: 'logs', // can be absolute or relative to the node's process
                autocreate: true // whether the `dir` should be created if it does not exist
            },
            {
                type: 'console',
                level: 'info',
                priority: 1
            }
        ]
    }
}
